@using System.Reflection
@using XCode
@using XCode.Configuration

@functions {

    String GetWidth(FieldItem item)
    {
        switch (Type.GetTypeCode(item.Type))
        {
            case TypeCode.String:
                if (item.Length <= 0 || item.Length > 300)
                    return "col-md-5";
                else
                    return "col-md-3";
        }
        return "col-md-1";
    }
}
@{
    var fact = EntityFactory.CreateOperate(ViewData.ModelMetadata.ModelType);
    //var funcGetWidth = Func<FieldItem, String>((field) =>
    //{

    //    return String.Empty;
    //});
}
<div class="panel panel-default">
    <div class="form-horizontal">
        @if (ViewBag.StatusMessage != null)
        {
            <div class="alert alert-success alert-dismissible text-center" role="alert">
                <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <strong>@ViewBag.StatusMessage</strong>
            </div>
        }
        @using (Html.BeginForm("Save/" + (Object)Model[fact.Unique.Name], ViewContext.Controller.GetType().Name.TrimEnd("Controller")))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary()
            foreach (var item in fact.Fields)
            {
                if (item.PrimaryKey)
                {

                }
                else
                {
                    <div class="form-group">
                        <label class="control-label col-md-1">@item.DisplayName</label>
                        <div class="@GetWidth(item)">
                            @switch (Type.GetTypeCode(item.Type))
                            {
                                case TypeCode.Boolean:
                                    @Html.CheckBox(item.Name, (Boolean)Model[item.Name])
                                    break;
                                case TypeCode.DateTime:
                                @Html.TextBox(item.Name, null, new { @class = "form-control" })
                                    break;
                                case TypeCode.Decimal:
                                @Html.TextBox(item.Name, null, new { @class = "form-control" })
                                    break;
                                case TypeCode.Single:
                                case TypeCode.Double:
                                @Html.TextBox(item.Name, null, new { @class = "form-control" })
                                    break;
                                case TypeCode.Int16:
                                case TypeCode.Int32:
                                case TypeCode.Int64:
                                case TypeCode.UInt16:
                                case TypeCode.UInt32:
                                case TypeCode.UInt64:
                                @Html.TextBox(item.Name, (Object)Model[item.Name], new { @class = "text-box single-line form-control", @type = "number" })
                                    break;
                                case TypeCode.String:
                                    if (item.Name.Contains("Pass"))
                                    {
                                        @Html.Password(item.Name, null, new { @class = "form-control" })
                                    }
                                    else if (item.Length <= 0 || item.Length > 300)
                                    {
                                        @Html.TextArea(item.Name, new { @class = "form-control" })
                                    }
                                    else
                                    {
                                        @Html.TextBox(item.Name, null, new { @class = "form-control" })
                                    }
                                    break;
                                default:
                                @Html.Editor(item.Name)
                                    break;
                            }
                            <p class="help-block">@item.Description</p>
                        </div>
                    </div>
                }
            }
            <div class="form-actions">
                <label class="control-label col-md-2"></label>
                <button type="submit" class="btn btn-success"><i class="glyphicon glyphicon-ok"></i><strong>保存</strong></button>
                <button type="button" class="btn btn-danger"><i class="glyphicon glyphicon-remove"></i><strong>取消</strong></button>
            </div>
        }
    </div>
</div>